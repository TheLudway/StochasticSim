knitr::opts_chunk$set(echo = TRUE)
generator(1, 10)
(abs(0.5-0.516)/0.5) * 100
6.31656 - 6.309694
93.1628 / 4
93.1628 / 4 - H
93.1628 / 4 - 23.16239
275.884/2
275.884/2 - 136.6746
source("~/.active-rstudio-document", echo=TRUE)
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
min(x)
min(X)
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
# inputs
N <- 10000 # sample size
n <- 10 # rv parameters
p <- 0.7
set.seed(100) # seed for RNG
# generate sample and estimate p
X <- rbinom(N,n,p)
phat <- rep(0, n+1)
for (i in 0:n) phat[i+1] <- sum(X == i)/N
phat.CI <- 1.96*sqrt(phat*(1-phat)/N)
# plot output
plot(0:n, dbinom(0:n, n, p), type="h", xlab="x", ylab="p(x)")
# plot output
plot(0:n, dbinom(0:n, n, p), type="h", xlab="x", ylab="p(x)")
# plot output
plot(0:n, dbinom(0:n, n, p), type="h", xlab="x", ylab="p(x)")
points(0:n, dbinom(0:n, n, p), pch=19)
points(0:n, phat, pch=3)
plot(phat.CI, phat)
plot(phat, phat.CI, xlab="x", ylab="")
plot(phat, phat.CI, xlab="x")
phat
plot(phat, phat.CI**2, xlab="x")
plot(phat, phat.CI)
plot(phat, phat.CI, xlim = 1)
plot(phat, phat.CI, xlim = c(0, 1))
source("~/Downloads/confidence.interval.binom.R", echo=TRUE)
# inputs
N <- 10000 # sample size
plot(phat, phat.CI, xlim = c(0, 1))
sigmap = (phat * (1 - phat))/N
plot(phat, sigmap, xlim = c(0, 1))
plot(phat, sigmap)
plot(phat, sigmap, xlim = c(0, 1))
plot(phat, sigmap, xlim = c(0, 1))
plot(phat**"", sigmap, xlim = c(0, 1))
plot(phat**2, sigmap, xlim = c(0, 1))
plot(phat**2, sigmap, xlim = c(0, 1))
plot(phat**2, sigmap, xlim = c(0, 1))
plot(phat**2, sigmap, xlim = c(0, 1))
plot(phat, sigmap, xlim = c(0, 1))
plot(phat, sigmap, xlim = c(0, 1))
phatprueba <- seq(0, 1, 0.01)
plot(phatprueba, phatprueba*(1-phatprueba)/N, xlim = c(0, 1))
plot(phatprueba, phatprueba*(1-phatprueba)/N, xlim = c(0, 1))
phat
max(phat)
max(phatprueba)
# plot output
plot(0:n, dbinom(0:n, n, p), type="h", xlab="x", ylab="p(x)")
points(0:n, dbinom(0:n, n, p), pch=19)
points(0:n, phat, pch=3)
points(0:n, phat+phat.CI, pch=3)
points(0:n, phat-phat.CI, pch=3)
# plot output
plot(0:n, dbinom(0:n, n, p), type="h", xlab="x", ylab="p(x)")
points(0:n, dbinom(0:n, n, p), pch=19)
points(0:n, phat, pch=3)
points(0:n, phat+phat.CI, pch=3)
points(0:n, phat-phat.CI, pch=3)
setwd("/home/marie/Repos/todo-mio/UTADEO/7° SEMESTRE/SIMULACIÓN ESTOCÁSTICA/SimEstocastica/Talleres/Taller3/LaTeX")
renv::init()
renv::status()
library(fpp2)
library(readxl)
renv::install("readxl")
renv::status()
renv::snapshot()
renv::status()
renv::snapshot()
renv::status()
library(readxl)
retaildata <- readxl::read_excel("retail.xlsx", skip=1)
retaildata
myts <- ts(retaildata[,"A3349337W"],
frequency=12, start=c(1982,4))
myts
library(ggplot2)
library(forecast)
library(ggfortify)
renv::install("ggfortify")
renv::status()
renv::snapshot()
autoplot(myts) +
ggtitle("Retail Time Series") +
xlab("Year") + ylab("Sales")
ggseasonplot(myts, year.labels=TRUE, year.labels.left=TRUE) +
ggtitle("Seasonal Plot") +
ylab("Sales")
ggsubseriesplot(myts) +
ggtitle("Subseries Plot") +
ylab("Sales")
gglagplot(myts) +
ggtitle("Lag Plot")
ggAcf(myts) +
ggtitle("ACF Plot")
df
dj
wages
